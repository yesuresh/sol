#Q1: Write a function named ‘pollutantmean’ that calculates the mean of a pollutant (sulfate or nitrate) across a specified list of monitors. The function ‘pollutantmean’ takes three arguments: ‘directory’, ‘pollutant’, and ‘id’. Given a vector monitor ID numbers, ‘pollutantmean’ reads that monitors’ particulate matter data from the directory specified in the ‘directory’ argument and returns the mean of the pollutant across all of the monitors, ignoring any missing values coded as NA.
#SOLUTION-1

rm.files() #To remove the files.

getwd() # To get Current Working Directory

setwd("C:/Users/ganta.suresh.babu/Downloads") #Set Working Directory

pollutantmean <- function(directory, pollutant, id = 1:332) 
{
  
  filelist <- list.files(path = "C:/Users/ganta.suresh.babu/Downloads/specdata",pattern = ".csv", full.names = TRUE) #To List all 332 Files existed in specdata.
  
  values <- numeric() ## Function Nuemaric means All the nuemaric values without NA
  
  for(i in id) 
  {
    
    data <- read.csv(filelist[i]) # To read all files existed in specdata 
    
    values <- c(values, data[[pollutant]]) # concatinate nuemaric values and pollutant data i.e is "sulphate" or "Nitrate".
    
  }
  
  mean(values, na.rm = TRUE) # To find mean of values
}

# Result
pollutantmean("specdata","pollutant")

pollutantmean("specdata", "sulfate", 1:10)
## [1] 4.064128
pollutantmean("specdata", "nitrate", 70:72)
## [1] 1.732979
pollutantmean("specdata", "nitrate", 23)
## [1] 1.280833

##Q2: Write a function that reads a directory full of files and reports the number of completely observed cases in each data file. The function should return a data frame where the first column is the name of the file and the second column is the number of complete cases.

#SOLUTION-2

complete <- function(directory,id=1:332)
  
{
  
  filelist <- list.files(path ="C:/Users/ganta.suresh.babu/Downloads/specdata", pattern=".csv", full.names=TRUE) #To List all 332 Files existed in specdata.
  
  nobs <- numeric() #complete observed cases in the sense without NA VALUES 
  
  for(i in id)
  {
    data<- read.csv(filelist[i])
    nobs<- c(nobs,  sum(complete.cases(data)))
  } 
  data.frame(id, nobs)# Frame the two variables id,no of observations.
}


#Result

complete("specdata", 1)
##   id nobs
## 1  1  117
complete("specdata", c(2, 4, 8, 10, 12))
##   id nobs
## 1  2 1041
## 2  4  474
## 3  8  192
## 4 10  148
## 5 12   96
complete("specdata", 30:25)
##   id nobs
## 1 30  932
## 2 29  711
## 3 28  475
## 4 27  338
## 5 26  586
## 6 25  463
complete("specdata", 3)
##   id nobs
## 1  3  243

##Q3: Write a function that takes a directory of data files and a threshold for complete cases and calculates the correlation between sulfate and nitrate for monitor locations where the number of completely observed cases (on all variables) is greater than the threshold. The function should return a vector of correlations for the monitors that meet the threshold requirement. If no monitors meet the threshold requirement, then the function should return a numeric vector of length 0.

#solution-3

corr <- function(directory, threshold = 0) {
  
  files_full <- list.files(path = "C:/Users/ganta.suresh.babu/Downloads/specdata", full.names = TRUE)#To List all 332 Files existed in specdata.
  
  dat <- vector(mode = "numeric", length = 0)
  
  for (i in 1:length(files_full)) 
    
  {
    
    data <- read.csv(files_full[i])# To read data into to R environment.
    
    csum <- sum((!is.na(data$sulfate)) & (!is.na(data$nitrate)))#sum of available values of sulphate in data and nitrate in data
    
    if (csum > threshold)
      
    {
      
      tmp <- data[which(!is.na(data$sulfate)), ]
      
      data_i <- tmp[which(!is.na(tmp$nitrate)), ]
      
      dat <- c(data, cor(data_i$sulfate, data_i$nitrate))# To concatinate data and correlation b/w sulphate and nitrate.
    }
  }
  
  dat
}

#Result

dat <- corr("specdata")# To find corr b/w sulphate and nitrate.

head(dat)

summary(dat) 

## [1] -0.22255256 -0.01895754 -0.14051254 -0.04389737 -0.06815956 -0.12350667
##     Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
## -1.00000 -0.05282  0.10720  0.13680  0.27830  1.00000
## [1] 323
